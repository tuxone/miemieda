- hosts: all
  become: true
  vars:
    mysql_root_pass: root
    nvm_user: vagrant
  handlers:
  - name: restart nginx
    service: name=nginx state=restarted enabled=yes
  tasks:
  - name: Update repository
    apt:
      update_cache: yes
  - name: Update all packages to the latest version
    apt:
      upgrade: dist
  - name: Install essential tools
    apt: name={{ item }} state=present
    with_items:
      - git
      - vim
      - curl
      - wget
      - build-essential
      - gcc
      - make

  # Start of PPA
  # Add nginx stable repository from PPA and install its signing key.
  - name: Add nginx PPA
    apt_repository:
      repo: 'ppa:nginx/stable'
  - name: Add redis PPA
    apt_repository:
      repo: 'ppa:chris-lea/redis-server'
  - name: Add PHP PPA
    apt_repository:
      repo: 'ppa:ondrej/php'
  # End of PPA

  # Start of Installation
  - name: Install nginx
    apt:
      name: nginx
  - name: Install redis
    apt:
      name: redis-server

  # NOTE: the password problem
  # https://coderwall.com/p/sqdaya/mysql-server-installation-with-custom-password-in-ansible--2
  - name: Set MySQL root password before installing
    debconf: name='mysql-server' question='mysql-server/root_password' value='{{ mysql_root_pass }}' vtype='password'
  - name: Confirm MySQL root password before installing
    debconf: name='mysql-server' question='mysql-server/root_password_again' value='{{ mysql_root_pass }}' vtype='password'
  - name: Install MySQL
    apt: name={{ item }} state=present
    with_items:
      - mysql-server
      - mysql-client

  - name: Install PHP7
    apt: name={{ item }} state=present
    # TODO: enable error report
    with_items:
      - php7.1-fpm
      - php7.1-mcrypt
      - php7.1-zip
      - php7.1-redis
      - php7.1-xdebug
      - php7.1-curl
      - php7.1-gd
      - php7.1-intl
      - php7.1-mysql
      - php7.1-sqlite3
      - php7.1-xml
      - php7.1-mbstring
      - php7.1-json
  - name: Check if composer is installed
    # http://stackoverflow.com/questions/21892603/how-to-make-ansible-execute-a-shell-script-if-a-package-is-not-installed
    command: bash -c 'which composer'
    register: composer_check
    failed_when: False
  - name: Install composer
    become_user: root
    command: bash -c 'curl -sS https://getcomposer.org/installer | php && chmod +x composer.phar && mv composer.phar /usr/local/bin/composer'
    when: composer_check.stdout.find('composer') == -1

  - name: Clean nginx default vhost
    file:
      state: absent
      path: "/etc/nginx/sites-enabled/default"
    notify: restart nginx
  - name: Copy nginx config for symfony
    template:
      src: /vagrant/templates/symfony.j2
      dest: /etc/nginx/sites-available/symfony.conf
      owner: root
      group: root
  - name: Create symlink
    file: src=/etc/nginx/sites-available/symfony.conf dest=/etc/nginx/sites-enabled/symfony.conf state=link
    notify: restart nginx

  - name: Install nvm for user vagrant
    become_user: "{{ nvm_user }}"
    git: repo=https://github.com/creationix/nvm.git dest=~/.nvm
  - name: Export NVM_DIR
    become_user: "{{ nvm_user }}"
    lineinfile:
      dest: ~/.bashrc
      line: "export NVM_DIR=$HOME/.nvm"
      create: yes
  - name: Add nvm.sh to bashrc
    become_user: "{{ nvm_user }}"
    lineinfile:
      dest: ~/.bashrc
      line: "[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"  # This loads nvm"
      create: yes
  - name: Check if node is installed
    become_user: "{{ nvm_user }}"
    command: bash -c 'which node'
    register: node_check
    failed_when: False
  - name: Install latest node LTS
    become_user: "{{ nvm_user }}"
    # Thanks to https://truongtx.me/2015/11/02/ansible-install-and-work-with-nodejs-using-nvm
    command: bash -c '. ~/.nvm/nvm.sh; nvm install lts/*; nvm alias default lts/*'
    # FIXME: the check is not working, it still change every time run provision
    when: node_check.stdout.find('node') == -1

  # End of Installation
